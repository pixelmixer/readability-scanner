services:
  readability:
    image: phpdockerio/readability-js-server
    networks:
      - readable
    expose:
      - "3000"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=readability"

  readability-database:
    image: mongo
    networks:
      - readable
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - "E:\\NewsDatabase:/data/db"
    ports:
      - 27017:27017
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mongodb"

  rss-bridge:
    image: rssbridge/rss-bridge:latest
    networks:
      - readable
    volumes:
      - ./rss-bridge/whitelist.txt:/app/whitelist.txt
      - ./rss-bridge/bridges:/app/bridges
    ports:
      - 3939:80
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=rss-bridge"

  hug:
    build: ./hug/
    command: hug -f hug.py
    networks:
      - readable
    depends_on:
      - readability-database
    ports:
      - 3839:8000
    volumes:
      - ./hug/.:/src
    restart: unless-stopped
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      - OTEL_SERVICE_NAME=hug-api
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=hug-api"

  # Redis for Celery message broker
  redis:
    image: redis:7-alpine
    networks:
      - readable
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"

  news-scanner:
    build: ./news-scanner/
    container_name: news-scanner
    env_file: ./news-scanner/.env
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - rss-bridge
      - redis
    ports:
      - "4913:8080"
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      - OTEL_SERVICE_NAME=news-scanner
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=news-scanner"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery worker for processing queues
  celery-worker:
    build: ./news-scanner/
    container_name: celery-worker
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker worker --loglevel=info --queues=high,normal,low -E
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - redis
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      - OTEL_SERVICE_NAME=celery-worker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-worker"
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery beat for scheduling
  celery-beat:
    build: ./news-scanner/
    container_name: celery-beat
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker beat --loglevel=info
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      - OTEL_SERVICE_NAME=celery-beat
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-beat"
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery monitor (optional - for debugging)
  celery-flower:
    build: ./news-scanner/
    container_name: celery-flower
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker flower --port=5555
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    ports:
      - "5555:5555"
    volumes:
      - "./news-scanner:/app"
    restart: unless-stopped
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://signoz-otel-collector:4318
      - OTEL_SERVICE_NAME=celery-flower
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-flower"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # SigNoz - OpenTelemetry observability platform
  signoz-otel-collector:
    image: signoz/signoz-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./signoz/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=news-analysis-system,service.version=1.0.0
    networks:
      - readable
    depends_on:
      - signoz-clickhouse
    restart: unless-stopped

  signoz-clickhouse:
    image: clickhouse/clickhouse-server:23.8.2-alpine
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./signoz/clickhouse-config.xml:/etc/clickhouse-server/config.xml
    ports:
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=signoz
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    networks:
      - readable
    restart: unless-stopped

  signoz-db-init:
    image: clickhouse/clickhouse-server:23.8.2-alpine
    volumes:
      - ./signoz/init-db.sh:/init-db.sh
    networks:
      - readable
    depends_on:
      - signoz-clickhouse
    command: ["/bin/bash", "/init-db.sh"]
    restart: "no"

  signoz-query-service:
    image: signoz/query-service
    volumes:
      - ./signoz/query-service-config.yaml:/root/config/query-service-config.yaml
      - signoz_data:/var/lib/signoz
    ports:
      - "8080:8080"
    environment:
      - SIGNOZ_TELEMETRYSTORE_CLICKHOUSE_DSN=tcp://signoz-clickhouse:9000
      - SIGNOZ_ALERTMANAGER_LEGACY_API__URL=http://signoz-alertmanager:9093/api/v1
    networks:
      - readable
    depends_on:
      - signoz-clickhouse
    restart: unless-stopped

  signoz-frontend:
    image: signoz/frontend
    ports:
      - "3301:3301"
    environment:
      - REACT_APP_BASE_URL=http://localhost:3301
      - REACT_APP_SIGNOZ_INGESTION_KEY=YOUR_INGESTION_KEY
    networks:
      - readable
    depends_on:
      - signoz-query-service
    restart: unless-stopped


networks:
  readable:

volumes:
  redis_data:
  clickhouse_data:
  signoz_data:
