services:
  readability:
    image: phpdockerio/readability-js-server
    networks:
      - readable
    expose:
      - "3000"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=readability"

  readability-database:
    image: mongo
    networks:
      - readable
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - "E:\\NewsDatabase:/data/db"
    ports:
      - 30001:27017
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mongodb"

  rss-bridge:
    image: rssbridge/rss-bridge:latest
    networks:
      - readable
    volumes:
      - ./rss-bridge/whitelist.txt:/app/whitelist.txt
      - ./rss-bridge/bridges:/app/bridges
    ports:
      - 30002:80
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=rss-bridge"

  hug:
    build: ./hug/
    networks:
      - readable
    depends_on:
      - readability-database
    ports:
      - 30003:8000
    volumes:
      - ./hug/.:/src
    restart: unless-stopped
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=hug-api
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=hug-api"

  # ML Service - Dedicated microservice for ML operations (GPU-enabled)
  ml-service:
    build:
      context: ./ml-service/
      cache_from:
        - ml-service:latest
    container_name: ml-service
    networks:
      - readable
    depends_on:
      - readability-database
    ports:
      - "30010:8081"
    volumes:
      - ./ml-service/.pip-cache:/root/.cache/pip
    restart: unless-stopped
    # GPU support
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=ml-service
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=ml-service"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8081/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for Celery message broker
  redis:
    image: redis:7-alpine
    networks:
      - readable
    ports:
      - "30004:6379"
    volumes:
      - ./redis/data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis"

  news-scanner:
    build: ./news-scanner/
    container_name: news-scanner
    env_file: ./news-scanner/.env
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - rss-bridge
      - redis
      - ml-service
    ports:
      - "30005:8080"
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
      - "./news-scanner/models:/app/models"
    restart: unless-stopped
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=news-scanner
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=news-scanner"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery worker for processing queues
  celery-worker:
    build: ./news-scanner/
    container_name: celery-worker
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker worker --loglevel=info --queues=high,normal,low,ml_queue,llm_queue -E
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - redis
      - ml-service
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
      - "./news-scanner/models:/app/models"
    restart: unless-stopped
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=celery-worker
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-worker"
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery beat for scheduling
  celery-beat:
    build: ./news-scanner/
    container_name: celery-beat
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker beat --loglevel=info
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
      - "./news-scanner/models:/app/models"
    restart: unless-stopped
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=celery-beat
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-beat"
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery monitor (optional - for debugging)
  celery-flower:
    build: ./news-scanner/
    container_name: celery-flower
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker flower --port=5555
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    ports:
      - "30006:5555"
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/models:/app/models"
    restart: unless-stopped
    environment:
      - OTEL_RESOURCE_ATTRIBUTES=service.name=celery-flower
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://host.docker.internal:30007
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://host.docker.internal:30008/v1/logs
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://host.docker.internal:30008/v1/metrics
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=celery-flower"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  signoz-clickhouse-data:

networks:
  readable:
