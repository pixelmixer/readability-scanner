services:
  readability:
    image: phpdockerio/readability-js-server
    networks:
      - readable
    expose:
      - "3000"
    restart: unless-stopped

  readability-database:
    image: mongo
    networks:
      - readable
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - "E:\\NewsDatabase:/data/db"
    ports:
      - 27017:27017
    restart: unless-stopped

  rss-bridge:
    image: rssbridge/rss-bridge:latest
    networks:
      - readable
    volumes:
      - ./rss-bridge/whitelist.txt:/app/whitelist.txt
      - ./rss-bridge/bridges:/app/bridges
    ports:
      - 3939:80
    restart: unless-stopped

  hug:
    build: ./hug/
    command: hug -f hug.py
    networks:
      - readable
    depends_on:
      - readability-database
    ports:
      - 3839:8000
    volumes:
      - ./hug/.:/src
    restart: unless-stopped

  # Redis for Celery message broker
  redis:
    image: redis:7-alpine
    networks:
      - readable
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  news-scanner:
    build: ./news-scanner/
    container_name: news-scanner
    env_file: ./news-scanner/.env
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - rss-bridge
      - redis
    ports:
      - "4913:8080"
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery worker for processing queues
  celery-worker:
    build: ./news-scanner/
    container_name: celery-worker
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker worker --loglevel=info --queues=high,normal,low -E
    networks:
      - readable
    depends_on:
      - readability-database
      - readability
      - redis
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery beat for scheduling
  celery-beat:
    build: ./news-scanner/
    container_name: celery-beat
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker beat --loglevel=info
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    volumes:
      - "./news-scanner:/app"
      - "./news-scanner/logs:/app/logs"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis; r=redis.Redis(host='redis', port=6379, db=0); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery monitor (optional - for debugging)
  celery-flower:
    build: ./news-scanner/
    container_name: celery-flower
    env_file: ./news-scanner/.env
    command: celery -A celery_app.celery_worker flower --port=5555
    networks:
      - readable
    depends_on:
      - redis
      - celery-worker
    ports:
      - "5555:5555"
    volumes:
      - "./news-scanner:/app"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  readable:

volumes:
  redis_data:
