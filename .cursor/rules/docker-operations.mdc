---
description: Docker operations, service management, and container orchestration
globs: ["**/docker-compose*.yml", "**/Dockerfile*", "**/docker/**"]
alwaysApply: false
---

# Docker Operations Rules - Security & Performance Standards

## Service Architecture
```yaml
proxy-scanner (main app) :4912
  ↓ depends_on
readability (content) :3000 (internal)
readability-database (mongo) :27017
rss-bridge (rss gen) :3939
hug (python api) :3839
```

## MANDATORY Security & Performance Standards

### Secure Volume Configuration
```yaml
# ✅ CRITICAL - Database persistence with proper permissions
readability-database:
  volumes:
    - "E:\\NewsDatabase:/data/db:Z"  # Windows host path with SELinux label
  environment:
    - MONGO_INITDB_DATABASE=readability-database
  # ✅ Security: Run as non-root user
  user: "999:999"
  # ✅ Security: Read-only root filesystem where possible
  read_only: false  # MongoDB needs write access
  # ✅ Security: Limit container capabilities
  cap_drop:
    - ALL
  cap_add:
    - SETUID
    - SETGID
  # ✅ Performance: Resource limits
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.5'
      reservations:
        memory: 512M

# ✅ Development hot reload with security constraints
proxy-scanner:
  volumes:
    - "./src:/usr/src/app:ro"  # Read-only for security
  environment:
    - NODE_ENV=development
    - LOG_LEVEL=debug
  # ✅ Security: Non-root user
  user: "node"
  # ✅ Security: Limit capabilities
  cap_drop:
    - ALL
  # ✅ Security: No new privileges
  security_opt:
    - no-new-privileges:true
  # ✅ Performance: Resource limits
  deploy:
    resources:
      limits:
        memory: 512M
        cpus: '0.25'
```

### Production Security Configuration
```yaml
# ✅ REQUIRED for production deployments
version: '3.8'

services:
  proxy-scanner:
    # ✅ Security: Use specific image tags, not 'latest'
    image: node:18-alpine
    # ✅ Security: Restart policy
    restart: unless-stopped
    # ✅ Security: Health checks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # ✅ Security: Environment variables from secrets
    env_file:
      - .env.production
    # ✅ Performance: Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # ✅ Security: Network isolation
    networks:
      - backend
    # ✅ Security: Temporary filesystem for sensitive data
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

networks:
  backend:
    driver: bridge
    # ✅ Security: Enable encryption
    driver_opts:
      encrypted: "true"
    # ✅ Security: Custom subnet
    ipam:
      config:
        - subnet: 172.20.0.0/16
```

## Common Commands

### Development Workflow
```bash
# Start with hot reload
docker-compose up --watch

# Check service status
docker-compose ps

# View specific service logs
docker-compose logs -f proxy-scanner

# Restart after config changes
docker-compose restart [service-name]
```

### Debugging
```bash
# Test service connectivity
curl http://localhost:4912
curl http://localhost:3839/happy_birthday?name=Test
curl http://localhost:3939

# Access database
docker exec -it crawltest-readability-database-1 mongosh

# Check container resources
docker stats
```

## Service Communication Rules
- **Internal network**: `readable` - services use hostnames
- **Content extraction**: `http://readability:3000` (Node.js → PHP service)
- **Database access**: `mongodb://readability-database:27017`
- **External access**: Only via mapped ports

## Development Patterns
- **Code changes**: Auto-sync via volume mounts (no rebuilds needed)
- **Dependency changes**: Requires rebuild: `docker-compose build [service]`  
- **Config changes**: Restart required: `docker-compose restart`

## SECURE Build Patterns - ENFORCE THESE

### Node.js Service (Dockerfile) - Production Standards
```dockerfile
# ✅ Use specific version, not 'latest'
FROM node:18-alpine3.18 AS builder

# ✅ Security: Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# ✅ Security: Set working directory
WORKDIR /usr/src/app

# ✅ Performance: Copy package files first for layer caching
COPY --chown=nextjs:nodejs package*.json ./

# ✅ Security: Install dependencies as root, then switch user
RUN npm ci --only=production && \
    npm cache clean --force

# ✅ Security: Multi-stage build for smaller image
FROM node:18-alpine3.18 AS runner

# ✅ Security: Create non-root user in final image
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /usr/src/app

# ✅ Security: Copy only necessary files
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/node_modules ./node_modules
COPY --chown=nextjs:nodejs ./src ./

# ✅ Security: Run as non-root user
USER nextjs

# ✅ Security: Expose specific port
EXPOSE 8080

# ✅ Performance: Use node directly, not npm
CMD ["node", "index.js"]

# ✅ Security: Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js
```

### Python Service (hug/Dockerfile) - Security Focused
```dockerfile
# ✅ Use specific Alpine version for security
FROM python:3.11-alpine3.18 AS builder

# ✅ Security: Install system dependencies securely
RUN apk add --no-cache \
    gcc \
    musl-dev \
    linux-headers \
    && rm -rf /var/cache/apk/*

# ✅ Performance: Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# ✅ Security: Copy only requirements first
COPY requirements.txt .

# ✅ Performance: Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# ✅ Multi-stage build for smaller final image
FROM python:3.11-alpine3.18 AS runner

# ✅ Security: Create non-root user
RUN addgroup -g 1001 -S python && \
    adduser -S pyuser -u 1001 -G python

# ✅ Security: Copy virtual environment
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /src

# ✅ Security: Copy application code with proper ownership
COPY --chown=pyuser:python . .

# ✅ Security: Run as non-root user
USER pyuser

# ✅ Security: Expose specific port
EXPOSE 3839

# ✅ Security: Use specific command, not shell form
CMD ["python", "-m", "hug", "-f", "hug.py", "-p", "3839"]

# ✅ Security: Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD python -c "import requests; requests.get('http://localhost:3839/health')"
```

### Security Dockerfile Best Practices
```dockerfile
# ✅ MANDATORY security practices for ALL Dockerfiles:

# 1. Use specific base image versions
FROM node:18.17.1-alpine3.18  # Not node:latest

# 2. Scan for vulnerabilities
# RUN npm audit fix --force

# 3. Remove unnecessary packages
RUN apk del build-dependencies && \
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 4. Set proper file permissions
COPY --chown=user:group --chmod=644 ./src ./

# 5. Use .dockerignore to exclude sensitive files
# Create .dockerignore with:
# .env
# .git/
# node_modules/
# *.log
# Dockerfile*

# 6. Don't store secrets in environment variables
# Use Docker secrets or external secret management

# 7. Minimize attack surface
USER nonroot:nonroot
WORKDIR /app
EXPOSE 3000
```

## MANDATORY Security & Monitoring Rules

### Security Checklist - ENFORCE THESE
```bash
# ✅ 1. Always scan images for vulnerabilities
docker scout quickview
docker scout cves --only-fixed

# ✅ 2. Use Docker Bench for Security
docker run --rm --net host --pid host --userns host --cap-add audit_control \
  -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
  -v /etc:/etc:ro \
  -v /usr/bin/containerd:/usr/bin/containerd:ro \
  -v /usr/bin/runc:/usr/bin/runc:ro \
  -v /usr/lib/systemd:/usr/lib/systemd:ro \
  -v /var/lib:/var/lib:ro \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  docker/docker-bench-security

# ✅ 3. Monitor container resources
docker stats --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

# ✅ 4. Check for rootless containers
docker inspect $(docker ps -q) --format '{{.Config.User}}'

# ✅ 5. Validate network security
docker network ls
docker network inspect readable
```

### Production Monitoring & Alerting
```yaml
# ✅ Comprehensive monitoring stack
version: '3.8'

services:
  # Application services...
  
  # ✅ Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:v2.40.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  # ✅ Monitoring: Grafana
  grafana:
    image: grafana/grafana:9.3.0
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secure_password_here
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped

  # ✅ Security: Falco runtime security
  falco:
    image: falcosecurity/falco:0.35.0
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - /dev:/host/dev
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
    environment:
      - SYSDIG_BPF_PROBE=""
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge
```

### Backup & Recovery Automation
```bash
#!/bin/bash
# ✅ Automated backup script - backup.sh

set -euo pipefail

BACKUP_DIR="/backup/$(date +%Y-%m-%d)"
DB_CONTAINER="crawltest-readability-database-1"
RETENTION_DAYS=30

# ✅ Create backup directory
mkdir -p "${BACKUP_DIR}"

# ✅ Backup MongoDB
docker exec "${DB_CONTAINER}" mongodump \
  --archive="/data/backup-$(date +%H%M%S).archive" \
  --gzip

# ✅ Copy backup to host
docker cp "${DB_CONTAINER}:/data/backup-$(date +%H%M%S).archive" \
  "${BACKUP_DIR}/mongodb-backup.archive"

# ✅ Backup application configurations
tar -czf "${BACKUP_DIR}/app-config.tar.gz" \
  docker-compose.yml \
  .env \
  src/.env \
  monitoring/

# ✅ Cleanup old backups
find /backup -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} +

# ✅ Verify backup integrity
if [[ -f "${BACKUP_DIR}/mongodb-backup.archive" ]]; then
  echo "✅ Backup completed successfully: ${BACKUP_DIR}"
else
  echo "❌ Backup failed!"
  exit 1
fi
```

### Performance Optimization Rules
```bash
# ✅ 1. Optimize Docker daemon settings
# Add to /etc/docker/daemon.json:
{
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "default-ulimits": {
    "nofile": {
      "hard": 64000,
      "soft": 64000
    }
  }
}

# ✅ 2. Monitor and optimize resource usage
docker system df
docker system prune -f

# ✅ 3. Use BuildKit for faster builds
export DOCKER_BUILDKIT=1

# ✅ 4. Optimize image layers
# Use multi-stage builds
# Combine RUN commands
# Order instructions by frequency of change
```

### Emergency Procedures
```bash
# ✅ Emergency restart sequence
docker-compose down --remove-orphans
docker system prune -f
docker-compose up -d

# ✅ Database recovery from backup
docker exec -i crawltest-readability-database-1 \
  mongorestore --archive="/data/backup.archive" --gzip

# ✅ Container health emergency check
docker inspect --format='{{.State.Health.Status}}' $(docker ps -q)

# ✅ Network connectivity troubleshooting
docker exec crawltest-proxy-scanner-1 ping readability-database
docker exec crawltest-proxy-scanner-1 nslookup readability-database
```